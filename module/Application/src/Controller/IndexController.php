<?php
/**
 * @link      http://github.com/zendframework/ZendSkeletonApplication for the canonical source repository
 * @copyright Copyright (c) 2005-2016 Zend Technologies USA Inc. (http://www.zend.com)
 * @license   http://framework.zend.com/license/new-bsd New BSD License
 */

namespace Application\Controller;

use Application\Route\StaticRoute;
use Application\Service\CurrencyConverter;
use Zend\Barcode\Barcode;
use Zend\Barcode\Renderer\Image;
use Zend\Http\Response;
use Zend\Mvc\Controller\AbstractActionController;
use Zend\Mvc\MvcEvent;
use Zend\View\Model\JsonModel;
use Zend\View\Model\ViewModel;

/**
 * Class IndexController
 * @package Application\Controller
 */
class IndexController extends AbstractActionController
{
    /** @var CurrencyConverter $currencyConverter */
    protected $currencyConverter;

    /**
     * IndexController constructor.
     * @param CurrencyConverter $currencyConverter
     */
    public function __construct(CurrencyConverter $currencyConverter)
    {
        $this->currencyConverter = $currencyConverter;
    }

    /**
     * @param MvcEvent $e
     * @return mixed
     */
    public function onDispatch(MvcEvent $e)
    {
        //echo __METHOD__;die;
        return parent::onDispatch($e); // TODO: Change the autogenerated stub
    }

    /**
     * @return ViewModel
     */
    public function indexAction()
    {
        $staticRoute = StaticRoute::factory([
            'dir_name' => 'fff',
            'template_prefix' => 'fff',
            'filename_pattern' => 'fff',
            'defaults' => ['fff'],

        ]);
        var_dump($staticRoute);die;

        var_dump($this->accessPlugin()->checkAccess('f'));

//        throw new \Exception();

        //var_dump($this->currencyConverter);die;
        return new ViewModel;
    }

    /**
     * @return ViewModel
     */
    public function aboutAction()
    {
        /** @var string $appName */
        $appName = 'HelloWorld';
        
        /** @var string $appDescription */
        $appDescription = 'A sample application for the Using Zend Framework 3 book';
        
        return new ViewModel([
            'appName' => $appName,
            'appDescription' => $appDescription,
        ]);
    }

    /**
     * @return void
     */
    public function viewAction()
    {
        /** @var Response $response */
        $response = $this->getResponse();

        $response->setStatusCode(500);
        return;
    }

    /**
     * @return JsonModel
     */
    public function getJsonAction()
    {
        return new JsonModel([
            'status' => 'SUCCESS',
            'message'=>'Here is your data',
            'data' => [
                'full_name' => 'John Doe',
                'address' => '51 Middle st.'
            ],
        ]);
    }

    /**
     * @return \Zend\Stdlib\ResponseInterface
     */
    public function barcodeAction()
    {
        /** @var string $type */
        $type = $this->params()->fromRoute('type', 'code39');

        /** @var string $label */
        $label = $this->params()->fromRoute('label', '1235413254234');

        /** @var Image $barcode */
        $barcode = Barcode::factory(
            $type,
            'image',
            [
                'text' => $label,
            ],
            []
        );

        $barcode->render();

        return $this->getResponse();
    }

    /**
     * @return ViewModel
     */
    public function docAction()
    {
        //var_dump($this->getEvent()->getRouteMatch()->getMatchedRouteName());
        var_dump($this->getEvent()->getRouter());

        /** @var string $page */
        $page = $this->params()->fromRoute('page', 'docmentation');

        /** @var string $template */
        $template = 'application/index' . $page . '.phtml';

        /** @var string $fileName */
        $fileName = realpath(__DIR__ . '/../../view/' . $template);

        if (!is_file($fileName) || !is_readable($fileName)) {
            $this->getResponse()->setStatusCode(404);
            return;
        }

        /** @var ViewModel $viewModel */
        $viewModel = new ViewModel;
        $viewModel->setTemplate($template);

        return $viewModel;
    }
}
